import copy
import random

def differentialCrossoverBin(target, mutant, cxProb) :
    """Differential mutation in the standard bin variant.
    
    Performs a standard independent binomial mutation as described in
    (Reiner and Storn, 1997). A trial individual is generated by
    selecting genes from the two given individuals at random according
    to the specified crossover probability. First a random gene index K
    is generated, then, a random value r is generated for each i-th gene 
    and if i==K or r <= cxProb, then trial[i] = mutant[i], otherwise
    trial[i] = target[i].

    Args:
        target: a target individual.
        
        mutant: an individual generated from a previous differential
        mutation.
        
        cxProb (float): independent probability to select a gene from
        the mutant individual instead of the target individual.
        
    Returns:
        A trial individual, output of the crossover. Input individuals
        are left unchanged.
    """
    
    trial = copy.deepcopy(target)
    
    ridx = random.randint(0, len(target)-1)
    
    for idx, v in enumerate(mutant) :
        if idx == ridx or random.random() <= cxProb :
            trial[idx] = v
            
    return trial